[{"name": "app.py", "content": "import pathlib as pt\nimport pandas as pd\nfrom alpha_vantage.timeseries import TimeSeries\nfrom alpha_vantage.fundamentaldata import FundamentalData\nfrom alpha_vantage.foreignexchange import ForeignExchange\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\nfrom shinywidgets import render_plotly\nfrom stocks import stocks\nfrom currencies import currency_codes\n\n# Define API key\nAPI_key = 'WTFEVW7AXQOQ7WQP'\n\n# UI page setup\nui.page_opts(title=\"Stock Market Explorer\", fillable=True)\n\n# Sidebar with stock ticker selection and date range input\nwith ui.sidebar():\n    ui.input_selectize(id=\"ticker\", label=\"Select Stocks\", choices=stocks, selected=\"AAPL\")\n    ui.input_selectize(  id=\"local_currency\",label=\"Select local Currency\",choices=currency_codes,\n                       selected=\"United States Dollar\")\n    ui.input_selectize(  id=\"foreign_currency\",label=\"Select foreign Currency\",choices=currency_codes,\n                       selected=\"Euro\")\n    ui.input_numeric(\"foreign_amount\", \"Amount in foreign Currency to buy\", 1, min=1, max=1e6)\n\n# Reactive function to fetch stock data based on selected ticker and date range\n@reactive.calc\ndef get_ts_data():\n    # Activate the API client with the key\n    ts = TimeSeries(key=API_key, output_format='pandas')\n    \n    # Get the selected ticker symbol\n    ticker = input.ticker()  # Get ticker selected by the user\n    \n    # Fetch the monthly data from Alpha Vantage API\n    data, metadata = ts.get_monthly_adjusted(ticker)  # You can choose 'get_monthly' or 'get_monthly_adjusted'\n    \n    return data\n    \n@reactive.calc\ndef get_fd_data():\n    # Activate the API client with the key\n    fd =FundamentalData(API_key,output_format='pandas')\n\n    #Get the selected tcker symbol\n    ticker =input.ticker()\n\n    # Fetch fundamental data from Alpha Vantage API\n    data1=fd.get_company_overview(ticker)\n    data2=fd.get_balance_sheet_annual(ticker)\n    data3=fd.get_income_statement_annual(ticker)\n    data4=fd.get_cashflow_annual(ticker)\n    data5=fd.get_earnings_annual(ticker)\n    return data1,data2,data3,data4,data5\n\n@reactive.calc\ndef realtime_forex():\n    # Activate the ForeignExchange client with your API key\n    fx = ForeignExchange(key=API_key, output_format='pandas')\n\n    # get local and foreign currency\n    local_currency =input.local_currency()\n    foreign_currency =input.foreign_currency()\n\n        # Get real-time exchange rate for the given currency pair\n    data = fx.get_currency_exchange_rate(from_currency=local_currency,\n                                              to_currency=foreign_currency)\n        \n    return data\n\n    \n\n############################\n# OUTPUT COMPONENTS\n############################\nwith ui.hold():\n\n    @render.ui\n    def cash_icon():\n        icon = icon_svg(\"money-bills\")\n        return icon\n\n    @render.ui\n    def local_currency_icon():\n            currency_symbol =input.local_currency()\n            icon = icon_svg(f\"{currency_symbol}-sign\")\n            return icon\n\n\n    @render.ui\n    def foreign_currency_icon():\n        currency_symbol =input.foreign_currency()\n        icon = icon_svg(f\"{currency_symbol}-sign\")\n        return icon\n\n\n# Tab setup for UI components\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Company Overview\"):\n        with ui.layout_column_wrap(fill=False):\n              @render.data_frame\n              def company_overview_df():\n              # Get the stock data using the reactive get_fd_data() function\n                  data1,data2,data3,data4,data5 = get_fd_data()\n    \n                  return data1  # Return the formatted data as a data frame for rendering\n                \n    with ui.nav_panel(\"Monthly Historical data\"):\n        with ui.layout_column_wrap(fill=False):\n            # Render a Data with the stock dat\n            @render.data_frame\n            def stock_df():\n                # Get the stock data using the reactive get_ts_data() function\n                data = get_ts_data()\n    \n                return data  # Return the formatted data as a data frame for rendering\n    with ui.nav_panel(\"Financial Statements\"):\n        with ui.accordion(id=\"acc\", open=\"Balance Sheet\"):  \n            with ui.accordion_panel(\"Balance Sheet\"):  \n                @render.data_frame\n                def balance_sheet_df():\n                  # Get the stock data using the reactive get_fd_data() function\n                  data1,data2,data3,data4,data5 = get_fd_data()\n    \n                  return data2\n\n            with ui.accordion_panel(\"Income Statement\"):  \n                @render.data_frame\n                def income_statement_df():\n                  # Get the stock data using the reactive get_fd_data() function\n                  data1,data2,data3,data4,data5 = get_fd_data()\n    \n                  return data3\n\n            with ui.accordion_panel(\"Cash Flow Statement\"):  \n                @render.data_frame\n                def cashflow_statement_df():\n                  # Get the stock data using the reactive get_fd_data() function\n                  data1,data2,data3,data4,data5 = get_fd_data()\n    \n                  return data4\n\n            with ui.accordion_panel(\"Earnings Statement\"):  \n                @render.data_frame\n                def earnings_statement_df():\n                  # Get the stock data using the reactive get_fd_data() function\n                  data1,data2,data3,data4,data5 = get_fd_data()\n    \n                  return data5\n                    \n    with ui.nav_panel(\"Forex\"):\n         with ui.value_box(showcase=output_ui(\"cash_icon\")):\n            \"EXCHANGE RATE INFO\"\n            @render.ui\n            def local_currency_info():\n                data=realtime_forex()\n                return data\n                \n         with ui.value_box(showcase=output_ui(\"foreign_currency_icon\")):\n            \"FOREIGN CURRENCY AMOUNT\"\n            @render.ui\n            async def foreign_currency_amount():\n                data=await realtime_forex()\n                amount =data[\"Exchange Rate\"]*input.Local_amount()\n                return amount\n                \n        \n        \n    \n        \n        \n            \n", "type": "text"}, {"name": "currencies.py", "content": "currency_codes = {     \n    \"dollar\": \"USD\",     \n    \"euro\": \"EUR\",     \n    \"british pound sterling\": \"GBP\",     \n    \"japanese yen\": \"JPY\",     \n    \"swiss franc\": \"CHF\",     \n    \"canadian dollar\": \"CAD\",     \n    \"australian dollar\": \"AUD\",     \n    \"new zealand dollar\": \"NZD\",     \n    \"chinese yuan\": \"CNY\",     \n    \"indian rupee\": \"INR\",     \n    \"mexican peso\": \"MXN\",     \n    \"brazilian real\": \"BRL\",     \n    \"south african rand\": \"ZAR\",     \n    \"singapore dollar\": \"SGD\",     \n    \"hong kong dollar\": \"HKD\",     \n    \"norwegian krone\": \"NOK\",     \n    \"swedish krona\": \"SEK\",     \n    \"danish krone\": \"DKK\",     \n    \"israeli new shekel\": \"ILS\",     \n    \"russian ruble\": \"RUB\",     \n    \"south korean won\": \"KRW\",     \n    \"turkish lira\": \"TRY\",     \n    \"argentine peso\": \"ARS\",     \n    \"chilean peso\": \"CLP\",     \n    \"polish zloty\": \"PLN\",     \n    \"thai baht\": \"THB\",     \n    \"indonesian rupiah\": \"IDR\",     \n    \"malaysian ringgit\": \"MYR\",     \n    \"philippine peso\": \"PHP\",     \n    \"egyptian pound\": \"EGP\",     \n    \"qatari riyal\": \"QAR\",     \n    \"kuwaiti dinar\": \"KWD\",     \n    \"bahraini dinar\": \"BHD\",     \n    \"omani rial\": \"OMR\",     \n    \"united arab emirates dirham\": \"AED\",     \n    \"saudi riyal\": \"SAR\",     \n    \"jordanian dinar\": \"JOD\",     \n    \"lebanese pound\": \"LBP\",     \n    \"vietnamese dong\": \"VND\",     \n    \"czech koruna\": \"CZK\",     \n    \"hungarian forint\": \"HUF\",     \n    \"romanian leu\": \"RON\",     \n    \"bulgarian lev\": \"BGN\",     \n    \"croatian kuna\": \"HRK\",     \n    \"serbian dinar\": \"RSD\",     \n    \"ukrainian hryvnia\": \"UAH\",     \n    \"kazakhstani tenge\": \"KZT\",     \n    \"uzbekistani som\": \"UZS\",     \n    \"tanzanian shilling\": \"TZS\",     \n    \"kenyan shilling\": \"KES\",     \n    \"ghanaian cedi\": \"GHS\",     \n    \"nigerian naira\": \"NGN\",     \n    \"bangladeshi taka\": \"BDT\",     \n    \"sri lankan rupee\": \"LKR\"\n}\n", "type": "text"}, {"name": "stocks.py", "content": "stocks = {\n    \"AAPL\": \"Apple Inc.\",\n    \"MSFT\": \"Microsoft Corporation\",\n    \"AMZN\": \"Amazon.com, Inc.\",\n    \"GOOGL\": \"Alphabet Inc.\",\n    \"META\": \"Meta Platforms\",\n    \"BRK-A\": \"Berkshire Hathaway Inc.\",\n    \"V\": \"Visa Inc.\",\n    \"JNJ\": \"Johnson & Johnson\",\n    \"WMT\": \"Walmart Inc.\",\n    \"JPM\": \"JPMorgan Chase & Co.\",\n    \"MA\": \"Mastercard Incorporated\",\n    \"PG\": \"The Procter & Gamble Company\",\n    \"UNH\": \"UnitedHealth Group Incorporated\",\n    \"DIS\": \"The Walt Disney Company\",\n    \"HD\": \"The Home Depot, Inc.\",\n    \"BAC\": \"Bank of America Corporation\",\n    \"NVDA\": \"NVIDIA Corporation\",\n    \"PYPL\": \"PayPal Holdings, Inc.\",\n    \"CMCSA\": \"Comcast Corporation\",\n    \"NFLX\": \"Netflix, Inc.\",\n    \"ADBE\": \"Adobe Inc.\",\n    \"KO\": \"The Coca-Cola Company\",\n    \"NKE\": \"NIKE, Inc.\",\n    \"MRK\": \"Merck & Co., Inc.\",\n    \"PEP\": \"PepsiCo, Inc.\",\n    \"T\": \"AT&T Inc.\",\n    \"PFE\": \"Pfizer Inc.\",\n    \"INTC\": \"Intel Corporation\",\n    \"CSCO\": \"Cisco Systems, Inc.\",\n    \"CRM\": \"salesforce.com, inc.\",\n    \"XOM\": \"Exxon Mobil Corporation\",\n}\n", "type": "text"}]